#include <iostream>
#include <math.h>

using namespace std;


int rotationSommets[24][8]=
{
    {0,1,2,3,4,5,6,7},
    {3,0,1,2,7,4,5,6},
    {2,3,0,1,6,7,4,5},
    {1,2,3,0,5,6,7,4},
    {1,5,6,2,0,4,7,3},
    {5,4,7,6,1,0,3,2},
    {4,0,3,7,5,1,2,6},
    {4,5,1,0,7,6,2,3},
    {3,2,6,7,0,1,5,4},
    {7,6,5,4,3,2,1,0},
    {6,7,3,2,5,4,0,1},
    {1,0,4,5,2,3,7,6},
    {3,7,4,0,2,6,5,1},
    {6,2,1,5,7,3,0,4},
    {4,7,6,5,0,3,2,1},
    {6,5,4,7,2,1,0,3},
    {0,3,7,4,1,2,6,5},
    {0,4,5,1,3,7,6,2},
    {2,1,5,6,3,0,4,7},
    {5,1,0,4,6,2,3,7},
    {7,3,2,6,4,0,1,5},
    {5,6,2,1,4,7,3,0},
    {2,6,7,3,1,5,4,0},
    {7,4,0,3,6,5,1,2},
};

int rotationArretes[24][12]=
{
    {0,1,2,3,4,5,6,7,8,9,10,11},
    {3,0,1,2,7,4,5,6,11,8,9,10},
    {2,3,0,1,6,7,4,5,10,11,8,9},
    {1,2,3,0,5,6,7,4,9,10,11,8},
    {9,5,10,1,8,7,11,3,0,4,6,2},
    {4,7,6,5,0,3,2,1,9,8,11,10},
    {8,3,11,7,9,1,10,5,4,0,2,6},
    {4,9,0,8,6,10,2,11,7,5,13},
    {2,10,6,11,0,9,4,8,3,1,5,7},
    {6,5,4,7,2,1,0,3,11,10,9,8},
    {6,11,2,10,4,8,0,9,5,7,3,1},
    {0,8,4,9,2,11,6,10,1,3,7,5},
    {11,7,8,3,10,5,9,1,2,6,4,0},
    {10,1,9,5,11,3,8,7,6,2,0,4},
    {7,6,5,4,3,2,1,0,8,11,10,9},
    {5,4,7,6,1,0,3,2,10,9,8,11},
    {3,11,7,8,1,10,5,9,0,2,6,4},
    {8,4,9,0,11,6,10,2,3,7,5,1},
    {1,9,5,10,3,8,7,11,2,0,4,6},
    {9,0,8,4,10,2,11,6,5,1,3,7},
    {11,2,10,6,8,0,9,4,7,3,1,5},
    {5,10,1,9,7,11,3,8,4,6,2,0},
    {10,6,11,2,9,4,8,0,1,5,7,3},
    {7,8,3,11,5,9,1,10,6,4,0,2},
};

int config[15][13]=
{
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,3,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,1,3,10,11,3,-1,-1,-1,-1,-1,-1,-1},
{11,2,3,6,5,10,-1,-1,-1,-1,-1,-1,-1},
{2,3,10,3,8,10,8,9,10,-1,-1,-1,-1},
{11,9,10,11,8,9,-1,-1,-1,-1,-1,-1,-1},
{2,3,10,3,8,10,8,9,10,7,6,11,-1},
{11,3,2,7,4,8,6,5,10,0,9,1,-1},
{7,4,11,4,11,2,4,2,9,2,9,1,-1},
{7,4,9,7,9,2,7,2,3,-1,-1,-1,-1},
{4,5,9,11,3,2,-1,-1,-1,-1,-1,-1,-1},
{4,5,9,11,10,3,10,1,3,-1,-1,-1,-1},
{4,9,5,7,6,11,10,1,2,-1,-1,-1,-1},
{7,6,3,6,3,2,4,5,0,5,0,1,-1},
{4,5,8,8,5,2,8,11,2,2,1,5,-1},
};

int pointAllume[15][8]=
{
    {0,0,0,0,0,0,0,0},
    {0,0,0,1,0,0,0,0},
    {0,0,1,1,0,0,0,0},
    {0,0,0,1,0,0,1,0},
    {1,1,1,0,0,0,0,0},
    {1,1,1,1,0,0,0,0},
    {1,1,1,0,0,0,0,1},
    {0,1,0,1,1,0,1,0},
    {1,1,0,1,1,0,0,0},
    {1,1,1,0,1,0,0,0},
    {0,0,0,1,0,1,0,0},
    {0,0,1,1,0,1,0,0},
    {0,0,1,0,0,1,0,1},
    {0,1,0,1,0,1,0,1},
    {1,1,0,1,0,1,0,0},
};

int lookUpTable[256][13];


int calculIndex(int tab[8]){
    int somme=0;
    for (int j=0;j<8;j++){
        if (tab[j]==1){
            somme += pow(2,j);
        }
    }
    return somme;
}



int main(){
    for (int i=0;i<15;i++){
        for (int l=0;l<24;l++){
            int nouveausommet[8]={0,0,0,0,0,0,0,0};
            for (int j=0;j<8;j++){
               if(pointAllume[i][j]==1){
                   for (int n=0;n<8;n++){
                       if(rotationSommets[l][n]==j){
                            nouveausommet[n]=1;
                       }
                   }
               }
            }
            int index = calculIndex(nouveausommet);
            int nouvelleArrete[13]={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
            for(int p=0;p<13;p++){
                if(config[i][p]!=-1){
                    int val=config[i][p];
                    for (int q=0;q<12;q++){
                        if(rotationArretes[l][q]==val){
                            nouvelleArrete[p]=q;
                        }
                    }
                }
            }
            for(int x=0;x<13;x++){
                lookUpTable[index][x]=nouvelleArrete[x];
                lookUpTable[255-index][x]=nouvelleArrete[x];
            }
        }
    }
    
    for(int i=0;i<256;i++){
        cout << "{";
        for (int j=0;j<13;j++){
            cout << lookUpTable[i][j];
            if(j!=12){
                cout << ",";
            }
        }
        cout << "},";
        cout << ""<< endl;
    }
    
    return 0;
}